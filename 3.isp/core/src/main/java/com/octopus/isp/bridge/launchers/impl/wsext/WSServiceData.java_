package com.octopus.isp.bridge.launchers.impl.wsext;

import com.octopus.isp.bridge.launchers.impl.WebServiceLauncher;
import com.octopus.utils.alone.StringUtils;
import com.octopus.utils.cls.ClassUtils;
import com.octopus.utils.xml.auto.XMLDoObject;
import com.octopus.utils.xml.desc.Desc;
import org.apache.axis2.context.ConfigurationContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.lang.reflect.Method;
import java.util.*;

/**
 * User: wfgao_000
 * Date: 15-8-9
 * Time: 上午8:44
 */
public class WSServiceData {
    static transient Log log = LogFactory.getLog(WSServiceData.class);
    ConfigurationContext configurationContext;
    Map<String,Map<String,String>> pojoList;
    List<ServiceInfo> serviceList = new ArrayList<ServiceInfo>();

    public WSServiceData(ConfigurationContext configurationContext){
        this.configurationContext= configurationContext;
        WebServiceLauncher launcher = (WebServiceLauncher)configurationContext.getAxisConfiguration().getParameter(WebServiceLauncher.LAUNCHER_PROPERTY_KEY).getValue();
        //launcher.addEnv("WSContext",configurationContext);
        //ISPDictionary dictionary = (ISPDictionary)launcher.getObjectById("Dictionary");
        //pojoList = dictionary.getPojoList();

        Map<String,ServiceInfo> temp= new HashMap<String, ServiceInfo>();
        /*Map<String,Map<String,String[]>> ss = dictionary.getWSServiceList();
        if(null != ss){
            Iterator<String> its = ss.keySet().iterator();
            while(its.hasNext()){
                String catalog = its.next();
                Map<String,String[]> sn = ss.get(catalog);
                Iterator<String> si = sn.keySet().iterator();
                while(si.hasNext()){
                    String sname = si.next();
                    String[] ps = sn.get(sname);

                    String par=null,ret=null,desc=null,opclass=null,busiclass=null;
                    if(ps.length>0)
                       par = ps[0];
                    if(ps.length>1)
                        ret = ps[1];
                    if(ps.length>2)
                        desc = ps[2];
                    if(ps.length>3)
                        opclass = ps[3];
                    if(ps.length>4)
                        busiclass=ps[4];
                    String serid = busiclass;
                    ServiceInfo ser=null;
                    if(!temp.containsKey(serid)){
                        ser = new ServiceInfo();
                        ser.setServiceName(serid);
                        temp.put(serid,ser);
                    }
                    ser = temp.get(serid);
                    if(StringUtils.isBlank(par)){
                        ser.addClassInfo(catalog,sname,null,ret);
                    }else{
                        ser.addClassInfo(catalog,sname,new String[][]{{"par0",par}},ret);
                    }
                }

            }
        }*/
        //Parameter p = configurationContext.getAxisConfiguration().getParameter("services");
        /*if(null != p){
            XMLMakeup[] mks = (XMLMakeup[])p.getValue();
            if(null != mks){
                for(XMLMakeup x:mks){
                    XMLMakeup[] xs = x.getChild("service");
                    if(null != xs){
                        for(XMLMakeup s:xs){
                            String c = s.getProperties().getProperty("class");
                            if(StringUtils.isNotBlank(c)){
                                if(s.getChildren().size()==0){
                                    try {
                                        appendService(temp,Class.forName(c),s.getProperties().getProperty("methods"));
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }*/
        String path = launcher.getXML().getProperties().getProperty("loadpath");
        if(StringUtils.isNotBlank(path)) {
            Map ms = launcher.getXMLObjectContainer();
            Iterator ist = ms.keySet().iterator();
            while (ist.hasNext()) {
                Object o = ms.get(ist.next());
                if (o instanceof XMLDoObject) {
                    XMLDoObject xd = (XMLDoObject) o;
                    if (xd.getXML().getProperties().containsKey("path") && xd.getXML().getProperties().getProperty("path").indexOf(path) == 0) {
                        String name = xd.getXML().getProperties().getProperty("path");
                        /*if(StringUtils.isBlank(name))
                            name = xd.getXML().getProperties().getProperty("path");*/
                        ServiceInfo ser = temp.get(name);
                        if(null == ser) {
                                ser = new ServiceInfo();
                                ser.setServiceName(name);
                                temp.put(ser.getServiceName(), ser);
                        }
                        try{
                            if(null != xd.getDescStructure()){
                                //创建参数Class到Classloader
                                Class inputbean = Desc.convert2Bean(xd.getXML().getProperties().getProperty("path"), xd.getXML().getId(), (Map) xd.getDescStructure().get("input"));
                                Class returnbean = Desc.convert2Bean(xd.getXML().getProperties().getProperty("path"), xd.getXML().getId(), (Map) xd.getDescStructure().get("output"));
                                if(null != inputbean && null != returnbean)
                                    ser.addClassInfo(xd.getXML().getProperties().getProperty("path"),xd.getXML().getId(),new String[][]{{inputbean.getName()}},returnbean.getName());
                                else if(null != inputbean)
                                    ser.addClassInfo(xd.getXML().getProperties().getProperty("path"),xd.getXML().getId(),new String[][]{{inputbean.getName()}},null);
                                else if(null != returnbean)
                                    ser.addClassInfo(xd.getXML().getProperties().getProperty("path"),xd.getXML().getId(),null,returnbean.getName());
                            }else{
                                ser.addClassInfo(xd.getXML().getProperties().getProperty("path"),xd.getXML().getId(),null,null);
                            }
                            //创建服务或添加方法到类
                            //String c = xd.getXML().getProperties().getProperty("class");
                            //appendService(temp,Class.forName(c),xd.getXML().getId());
                            //增加服务到webservice
                        }catch (Exception e){
                            log.error("get XMLDoObject Description error",e);
                        }

                    }

                }
            }
            Iterator<ServiceInfo> its = temp.values().iterator();
            while(its.hasNext())
                WSISPDeployer.addService(configurationContext,its.next());

            serviceList.addAll(temp.values());
        }
    }
    /**
     * 获取POJO对象描述
     * @return className, fieldName,fieldType
     */
    Map<String,Map<String,String>> getPoJoMap(){
        /*HashMap pojo = new HashMap();
        HashMap m = new HashMap();
        m.put("name","java.lang.String");
        m.put("age","int");
        m.put("date","java.util.Date");
        pojo.put("com.ws.pojo.hadoop.WTest",m);*/
         return pojoList;
    }

    List<ServiceInfo> getServices(){


/*        ServiceInfo s = new ServiceInfo();
        s.setServiceName("hello");
        s.setDesc("how are you");

        s.addClassInfo("", "hello", new String[][]{{"name", "java.lang.String"}}, "String");
        s.addClassInfo("","pojo",new String[][]{{"info","com.ws.pojo.hadoop.WTest"}},"String");

        s.addClassInfo("","DataQuery",new String[][]{{"queryCond","com.hadoop.WSQueryBean"}},"com.hadoop.DataQueryReturn[]");
        li.add(s);

        ServiceInfo s2 = new ServiceInfo();
        s2.setServiceName("he");
        s2.addClassInfo("com.hadoop.TestWS", "doSome2", new String[][]{{"name", "java.lang.String"},{"type", "java.lang.String"}}, "String");
        s2.addClassInfo("com.hadoop.TestWS","doSome",new String[][]{{"name","java.lang.String"},{"type", "java.lang.String"}},"String");
        s2.addClassInfo("com.hadoop.TestWS","doSome3",new String[][]{{"name","java.lang.String"},{"type", "java.lang.String"}},"String");
        s2.addClassInfo("com.hadoop.TestWS","doSome4",new String[][]{{"name","java.lang.String"},{"type", "java.lang.String"}},"String");
        s2.addClassInfo("com.hadoop.TestWS","doSome5",new String[][]{{"name","java.lang.String"},{"type", "java.lang.String"}},"String");
        s2.addClassInfo("com.hadoop.TestWS","doSome6",new String[][]{{"name","java.lang.String"},{"type", "java.lang.String"}},"String");
        li.add(s2);*/

        return serviceList;
    }

    void appendService(Map<String,ServiceInfo> li,Class c,String methods) throws NoSuchMethodException {
        ServiceInfo s = li.get("local");
        if(null == s){
            s = new ServiceInfo();
            s.setServiceName("local");
            //s.setDesc("<header><name></name><password></password></header> ");
            li.put("local",s);
        }
        if(StringUtils.isNotBlank(methods)){
            String[] mns = methods.split(",");
            for(String m:mns){
                s.addClassInfo(c.getName(),m,null,null);
            }
        }else{
            Method[] ms = ClassUtils.getPublicMethods(new Class[]{c});
            for(Method m:ms){
                s.addClassInfo(c.getName(),m.getName(),null,null);
            }
        }
    }
}
